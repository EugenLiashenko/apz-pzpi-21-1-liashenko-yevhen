1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

Система «EcoWatt» включає в себе три типи користувачів: клієнт, адміністратор та зовнішні пристрої. Кожна група користувачів використовує веб-інтерфейс і мобільний застосунок для взаємодії з системою. Веб-інтерфейс дозволяє адміністраторам ефективно керувати мережею, готельному персоналу - отримувати доступ до інформації про кімнати та відвідувачів. Мобільний застосунок полегшує взаємодію між користувачами та системою. IoT-прилади використовуються для збору даних і покращення функціональності системи.
Основними потребами клієнтів є: перегляд даних кімнати, збереження показників з датчиків кімнати, можливість аналізу даних кімнати, можливість виявити можливі критичні, можливість отримання сповіщення щодо зміни показників кімнати або її критичного стану, отримання статистики даних з датчиків, зміна своїх даних та даних кімнати.
Основними потребами адміністратора є: можливість перегляду та створення, редагування користувачів системи, можливість створення датчиків в системі, можливість налаштування датчиків в системі, можливість створення, редагування та видалення даних користувачів, можливість створення резервних копій даних системи та їхній імпорт в систему.
Взаємодію кожної ролі користувачів з системою представлено на
діаграмі прецедентів (див. додат. А.1).
 
2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ

Для проєктування бази даних було розроблено ER-модель даних (див. рис. 1). Вона складається з 6 таблиць: користувачі, апартаменти, бронювання, датчики, стан апартаментів, повідомлення.
 
На діаграмі можна побачити такі зв’язки:
	−	Користувач –> Повідомлення. Один до багатьох. Кожен користувач може мати багато повідомлень, але кожне повідомлення пов'язане лише з одним користувачем.
	−	Користувач –> Бронювання. Один до багатьох. Кожен користувач може мати багато бронювань, але кожне бронювання пов'язане лише з одним користувачем.
	−	Апартаменти –> Інформація з датчиків. Один до багатьох. Кожні апартаменти можуть мати багато записів з датчиків, але кожний запис з датчиків пов'язаний лише з одними апартаментами.
	−	Апартаменти –> Стан апартаментів. Один до багатьох. Кожні апартаменти можуть мати багато записів зі стану апартаментів, але кожний запис пов'язаний лише з одними апартаментами.
	−	Апартаменти –> Бронювання. Один до багатьох. Кожні апартаменти можуть мати багато бронювань, але кожне бронювання пов'язане лише з одними апартаментами.

 
3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання серверної частини системи було обрано мову програмування C# з використанням технології ASP.NET Core Web API, дозволяючи писати швидкий та продуктивний код.
У якості бази даних використано MSSQL, до якої здійснюється доступ з серверного застосунку за допомогою технології Entity Framework Core, дуже зручної бібліотеки, яка дозволяє мати взаємодію з базою даних через об’єкти. 
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 2).
Для демонстрації та тестування API використовується OpenApi Swagger, зручний інструмент для перегляду та тестування API, покращує якість та зручність розробки. Для забезпечення безпеки даних та конфіденційності використовується захищений протокол HTTPS, який захищає дані під час їх передачі.
Для шифрування паролів та створення токенів авторизації використовується бібліотека System.Security.Cryptography для хешування паролів та JWT (Json Web Tokens) для створення токенів, що створює потужний та безпечний механізм управління доступом користувачів. Для передачі та отримання даних використовується принцип REST API.
Для маршрутизації запитів система використовує API контролери. Вони розбивають програму на логічні компоненти, кожен з яких відповідає за обробку певного типу запитів або користувацьких дій. Це спрощує управління кодом та дозволяє легко розширювати функціональність.
Розроблений серверний застосунок побудований за принципами трьох-шарової архітектури, яка складається з: Core, Abstraction, Services та Controllers.
В архітектуру також були доданs інтерцептори (Interceptors) та Widdleware, які перехоплюють запити та можуть їх блокувати, не допускаючи непідходящі по різним причинам запити до контролера. Система інтерцептор Authorize та JwtMiddleware. Архітектура серверного застосунку представлена на діаграмі пакетів (див. додаток Б рис. Б.1).
 
4 СПЕЦИФІКАЦІЯ REST

REST API в даному проекті складається із 37 кінцевих точок. Кожна кінцева точка відповідає за надання даних користувачеві та виконання бізнес логіки.

GetApartmentsById	GET	/Api/Apartments/{id}
GetAllApartments	GET	/Api/Apartments
GetApartmentsByStatus	GET	/Api/Apartments /status/{status}
CreateApartments	POST	/Api/Apartments
UpdateApartments	PUT	/Api/Apartments/{id}
DeleteApartments	DELETE	/Api/Apartments/{id}
GetAllBookings	GET	/Api/Booking
GetBookingById	GET	/Api/ Booking /{id}
CreateBooking	POST	/Api/Booking
UpdateBooking	PUT	/Api/Booking/{id}
DeleteBooking	DELETE	/Api/Booking/{id}
SaveToCsv	POST	/Api/BackUp/Save
RestoreFromCsv	POST	/Api/BackUp/Restore
DownloadAsZip	POST	/Api/BackUp/Download
GetMeasurementById	GET	/Api/Measurement/{id}
GetAllMeasurements	GET	/Api/Measurement
CreateMeasurement	POST	/Api/Measurement
UpdateMeasurement	PUT	/Api/Measurement/{id}
DeleteMeasurement	DELETE	/Api/Measurement/{id}
GetNotificationById	GET	/Api/Notification/{id}
GetAllNotification	GET	/Api/Notification
CreateNotification	POST	/Api/Notification
UpdateNotification	PUT	/Api/Notification/{id}
DeleteNotification	DELETE	/Api/Notification/{id}
GetBookingsStartCountPerLastMonth	GET	/Api/Statistics/BookingsStartCountPerLastMonth
GetBookingsEngCountPerLastMonth	GET	/Api/Statistics/BookingsEndCountPerLastMonth
GetBookingCountLastWeek	GET	/Api/Statistics/BookingCountLastWeek
GetAverageBookingPerDay	GET	/Api/Statistics/AverageBookingsPerDay
GetUserCount	GET	/Api/Statistics/UserCount
GetFinishedBookingsCount	GET	/Api/Statistics/FinishedBookingsCount
GetAllUsers	GET	/Api/User
GetUserById	GET	/Api/User/{id}
CreateUser	POST	/Api/User
UpdateUser	PUT	/Api/User/{id}
DeleteUser	DELETE	/Api/User/{id}
Login	POST	/Api/User/Login
SignUp	POST	/api/User/SignUp’

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проєктуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи за допомогою мови програмування C#.

ДОДАТОК В

StatisticsService.cs
1. using Core.DTOs.Booking;
2. using DAL.Data;
3. using Microsoft.EntityFrameworkCore;
4. 
5. namespace BLL.Statistics;
6. 
7. public class StatisticsService: IStatisticsService
8. {
9.     private readonly DataContext _dataContext;
10. 
11.     public StatisticsService(DataContext dataContext)
12.     {
13.         _dataContext = dataContext;
14.     }
15.     
16.	    public	async	Task<List<DayBookingsDto>> GetBookingsStartCountPerDayLastMonthAsync()
17.     {
18.         var monthStartDate = DateOnly.FromDateTime(DateTime.Now).AddMonths(-1);
19.         var bookingsCountPerDay = await _dataContext.Bookings
20.             .Where(s => s.StartingDate >= monthStartDate)
21.             .GroupBy(s => s.StartingDate)
22.             .Select(group => new DayBookingsDto
23.             {
24.                 Date = group.Key,
25.                 BookingCount = group.Count()
26.             })
27.             .OrderBy(model => model.Date)
28.             .ToListAsync();
29. 
30.         return bookingsCountPerDay;
31.     }
32. 
33.     public async Task<List<DayBookingsDto>> GetBookingsEndCountPerDayLastMonthAsync()
34.     {
35.         var lastMonthStartDate = DateOnly.FromDateTime(DateTime.Now).AddMonths(-1);
36.         var bookingsCountPerDay = await _dataContext.Bookings
37.             .Where(s => s.EndingDate >= lastMonthStartDate)
38.             .GroupBy(s => s.EndingDate)
39.             .Select(group => new DayBookingsDto
40.             {
41.                 Date = group.Key,
42.                 BookingCount = group.Count()
43.             })
44.             .OrderBy(dto => dto.Date)
45.             .ToListAsync();
46. 
47.         return bookingsCountPerDay;
48.     }
49. 
50.     public async Task<int> GetBookingsLastWeekAsync()
51.     {
52.         var lastWeekStartDate = DateOnly.FromDateTime(DateTime.Now).AddDays(-7);
53.         var bookingCount = await _dataContext.Bookings.CountAsync(s => s.StartingDate >= lastWeekStartDate);
54. 
55.         return bookingCount;
56.     }
57. 
58.     public async Task<double> GetAverageBookingsPerDayAsync()
59.     {
60.         var startingDate = await _dataContext.Bookings.MinAsync(s => s.StartingDate);
61.         var endingDate = DateOnly.FromDateTime(DateTime.Now);
62.         var totalDays = (endingDate.DayNumber - startingDate.DayNumber);
63. 
64.         if (totalDays <= 0)
65.         {
66.             return -1;
67.         }
68.             
69.         var averageShipmentsPerDay = await _dataContext.Bookings.CountAsync() / totalDays;
70. 
71.         return averageShipmentsPerDay;
72.     }
73. 
74.     public async Task<int> GetUserCountAsync()
75.     {
76.         var users = await _dataContext.Users.CountAsync();
77.         return users;
78.     }
79. 
80.     public async Task<int> GetFinishedBookingsCountAsync()
81.     {
82.         var currentDate = DateOnly.FromDateTime(DateTime.Now);
83.         var finishedBookings = await _dataContext.Bookings.Select(b => b.EndingDate < currentDate)
84.             .ToListAsync();
85. 
86.         return finishedBookings.Count;
87.     }
88. }


ДОДАТОК Г

JwtTokenService.cs
1	public class JwtTokenService: IJwtTokenService
2	{
3	    private readonly IConfiguration _configuration;
4	
5	    public JwtService(IConfiguration configuration)
6	    {
7	        _configuration = configuration;
8	    }
9	
10	    public string GenerateToken(int userId, Role role)
11	    {
12	        var claims = new List<Claim>
13	        {
14	            new (ClaimTypes.NameIdentifier, userId.ToString()),
15	            new (ClaimTypes.Role, role.ToString())
16	        };
17	
18	        var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(
19	            _configuration.GetSection("Jwt:SecretKey").Value));
20	        var credentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha512Signature);
21	        var token = new JwtSecurityToken(
22	            claims: claims,
23	            expires: DateTime.Now.AddDays(1),
24	            signingCredentials: credentials);
25	
26	        var jwt = new JwtSecurityTokenHandler().WriteToken(token);
27	        return jwt;
28	    }
29	}
 
ДОДАТОК Д

BackupService.cs
1	public class BackupService: IBackupService
2	{
3	    private readonly StarOfLifeContext _context;
4	
5	    public BackupService(StarOfLifeContext context)
6	    {
7	        _context = context;
8	    }
9	
10	    public async Task SaveToCsv(string directoryPath)
11	    {
12	        Directory.CreateDirectory(directoryPath);
13	        var entityTypes = _context.Model.GetEntityTypes();
14	
15	        foreach (var entityType in entityTypes)
16	        {
17	            var entityName = entityType.ClrType.Name;
18	            var filePath = Path.Combine(directoryPath, $"{entityName}.csv");
19	            
20	            var dbSetProperty = _context.GetType().GetProperty(entityName + "s");
21	            if (dbSetProperty == null) continue;
22	            
23	            var dbSet = dbSetProperty.GetValue(_context);
24	            var queryable = dbSet as IQueryable<object>;
25	            if (queryable == null) return;
26	
27	            var entities = await queryable.ToListAsync();
28	
29	            using var writer = new StreamWriter(filePath);
30	            using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
31	            await csv.WriteRecordsAsync(entities);
32	        }
33	    }
34	
35	    public async Task RestoreFromCsv(string directoryPath)
36	    {
37	        var entityTypes = _context.Model.GetEntityTypes();
38	
39	        foreach (var entityType in entityTypes)
40	        {
41	            var entityName = entityType.ClrType.Name;
42	            var filePath = Path.Combine(directoryPath, $"{entityName}.csv");
43	
44	            if (!File.Exists(filePath)) continue;
45	
46	            var dbSetProperty = _context.GetType().GetProperty(entityName + "s");
47	            if (dbSetProperty == null) continue;
48	
49	            var dbSet = dbSetProperty.GetValue(_context);
50	            
51	            using var reader = new StreamReader(filePath);
52	            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
53	            
54	            var entityListType = typeof(List<>).MakeGenericType(entityType.ClrType);
55	            var entities = (IList)Activator.CreateInstance(entityListType);
56	
57	            var records = csv.GetRecords(entityType.ClrType);
58	            foreach (var record in records)
59	            {
60	                entities.Add(record);
61	            }
62	            
63	            var addRangeMethod = dbSet.GetType().GetMethod("AddRange", new[] { typeof(IEnumerable<>).MakeGenericType(entityType.ClrType) });
64	            if (addRangeMethod != null)
65	            {
66	                addRangeMethod.Invoke(dbSet, new object[] { entities });
67	            }
68	            
69	            await _context.SaveChangesAsync();
70	        }
71	    }
72	
73	    public async Task<byte[]> DownloadAsZip(string directoryPath)
74	    {
75	        await SaveToCsv(directoryPath);
76	
77	        using var memoryStream = new MemoryStream();
78	        using (var zipOutputStream = new ZipOutputStream(memoryStream))
79	        {
80	            zipOutputStream.SetLevel(3);
81	
82	            var csvFiles = Directory.GetFiles(directoryPath, "*.csv");
83	            foreach (var filePath in csvFiles)
84	            {
85	                var entry = new ZipEntry(Path.GetFileName(filePath))
86	                {
87	                    DateTime = DateTime.Now,
88	                    IsUnicodeText = true
89	                };
90	                zipOutputStream.PutNextEntry(entry);
91	
92	                using var fileStream = File.OpenRead(filePath);
93	                fileStream.CopyTo(zipOutputStream);
94	                zipOutputStream.CloseEntry();
95	            }
96	        }
97	
98	        return memoryStream.ToArray();
99	    }
100	}
